and :: Boolean -> Boolean -> Boolean .
and True True = True  .
and x    y    = False .

or :: Boolean -> Boolean -> Boolean .
or True y     = True  .
or x    True  = True  .
or x    y     = False .

-- Non-recursive ADT properties
adt IntList = Nil | Cons Integer IntList .

thirdElementIsZero :: IntList -> Boolean .
thirdElementIsZero x =*=
  case x of
    ; Cons {y, Cons {z, Cons {0, rest}}} -> False
    ; y -> True .


adt Example = C Integer .

exampleCongruent :: Example -> Example -> Boolean .
exampleCongruent x y =*=
  case (x == y) of
    ; True -> let (C {xx}) = x in
              let (C {yy}) = y in
                  (xx == yy)
    ; False -> True .

nonNegative :: Example -> Boolean .
nonNegative (C {x}) =*= or (x > 0) (x == 0) .
