-- * Commutativity
addCommutative x y =*= (x + y) == (y + x) .

subCommutative x y =*= (x - y) == (y - x) .


-- Same properties with 'user-defined' functions
plus :: Integer -> Integer -> Integer .
plus x y = x + y.

plusCommutative x y =*= (plus x y) == (plus y x) .

minus :: Integer -> Integer -> Integer .
minus x y = x - y .

minusCommutative x y =*= (minus x y) == (minus y x) .


-- * Associativity
addAssociative x y z =*= ((x + y) + z) == (x + (y + z)) .

subAssociative x y z =*= ((x - y) - z) == (x - (y - z)) .


--- Same properties with 'user-defined' functions
plusAssociative x y z =*= (plus (plus x y) z) == (plus x (plus y z)) .

minusAssociative x y z =*= (minus (minus x y) z) == (minus x (minus y z)) .


-- * Relations
eqReflexive x =*= x == x .

eqFalsifiable x y =*= x == y .

gtFalsifiable x y =*= x > y .

ltFalsifiable x y =*= x < y .


-- * Operations
addOneGt x =*= (x + 1) > x .

subOneLt x =*= (x - 1) < x .


-- * Inverse
inversePlus x =*= (x + 1) - 1 == x .

inverseMinus x =*= (x - 1) + 1 == x .


-- * Multiplication
mult :: Integer -> Integer -> Integer .
mult 0 y = 0 .
mult x y = y + (mult (x - 1) y) .


-- Helper function
and :: Boolean -> Boolean -> Boolean .
and True True = True .
and x    y    = False .


-- * Closure under equality
-- addClosed :: Integer -> Integer -> Integer -> Integer -> Boolean .
addClosed x y xx yy =*=
  if and (x == xx) (y == yy)
     then (x + y) == (xx + yy)
     else True .

plusClosed :: Integer -> Integer -> Integer -> Integer -> Boolean .
plusClosed x y xx yy =*=
  if and (x == xx) (y == yy)
     then (plus x y) == (plus xx yy)
     else True .

subClosed x y xx yy =*=
  if and (x == xx) (y == yy)
     then (x - y) == (xx - yy)
     else True .


-- Variations on incrementing
plusOneClosed :: Integer -> Integer -> Boolean .
plusOneClosed x y =*=
  if (x == y)
     then (x + 1) == (y + 1)
     else True .

inc :: Integer -> Integer .
inc x = x + 1 .

incClosed :: Integer -> Integer -> Boolean .
incClosed x y =*=
  if (x == y)
     then (inc x) == (inc y)
     else True .


-- Less than & greater than
ltClosed :: Integer -> Integer -> Integer -> Integer -> Boolean .
ltClosed x y xx yy =*=
  case and (x == xx) (y == yy) of
    ; True -> (x < y) == (xx < yy)
    ; False -> True .


gtClosed :: Integer -> Integer -> Integer -> Integer -> Boolean .
gtClosed x y xx yy =*=
  case and (x == xx) (y == yy) of
    ; True -> (x > y) == (xx > yy)
    ; False -> True .
