adt Single = Ctr | Dtr Integer .

adt Recursive = C | D Recursive .

adt RecursiveMulti = A | B Integer RecursiveMulti .

adt List = Nil | Cons Integer List .

myList :: List .
myList = Cons { 1, Cons { 2, Cons { 3,  Nil } } } .

inferredList = Cons { 1, Cons { 2, Cons { 3,  Nil } } } .


-- Dead simple prop -- all that's required is that an ADT instance is *created*
alwaysTrue :: Single -> Boolean .
alwaysTrue x =*= True .

oneFalse :: Single -> Boolean .
oneFalse x =*= case x of
  ; Dtr {5} -> False
  ; y       -> True .
