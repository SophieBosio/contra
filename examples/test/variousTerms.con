-- This file contains a trivial example of each basic term


constant :: Integer .
constant = 5 .

plus :: Integer -> Integer -> Integer .
plus x y = x + y .

-- and, with pattern matching

application :: Integer -> Integer .
application x = plus x (plus x x) .

letIn :: Integer -> Integer .
letIn x = let y = x in x + 5 .

caseOf :: Integer -> Boolean .
caseOf x = case x of
  ; 1 -> True
  ; 2 -> True
  ; 3 -> True
  ; x -> False .

caseOfId :: Integer -> Integer .
caseOfId x = case x of
  ; x -> x .

caseOfNum :: Integer -> Integer .
caseOfNum x = case x of
  ; 5 -> 5
  ; y -> y + y .

caseOfMany :: Integer -> Integer .
caseOfMany x = case x of
  ; 1 -> 11
  ; 2 -> 22
  ; 3 -> 33
  ; 4 -> 44
  ; 5 -> 55
  ; x -> x + x .

and :: Boolean -> Boolean -> Boolean .
and True  True  = True  .
and True  False = False .
and False True  = False .
and False False = False .

or False False = False .
or x     y     = True  .

adt Example = C Integer | D Boolean Boolean .
adt Num     = E Integer .

caseOfADT :: Example -> Boolean .
caseOfADT x = case x of
  ; (C {y})    -> False
  ; (D {w, z}) -> and w z
  ; u          -> True .

numIntoADT :: Integer -> Example .
numIntoADT x = C {x} .

boolsIntoADT :: Boolean -> Boolean -> Example .
boolsIntoADT x y = D {x, y} .

adtToAdt :: Example -> Example .
adtToAdt x = x .

adtCase :: Example .
adtCase = case (C {5}) of
  ; (C {x})    -> (C {x})
  ; (D {x, y}) -> (D {x, y}) .

adtToAdtCase :: Example -> Example .
adtToAdtCase x = case x of
  ; (C {y})    -> (C {y})
  ; (D {y, z}) -> (D {y, z}) .

patternMatchADT :: Example -> Integer .
patternMatchADT (C {5}) = 5 .
patternMatchADT (C {x}) = x + x .
patternMatchADT (D {x, y}) = 1 .

letInADT :: Integer -> Example .
letInADT x = let y = x in (C {y}) .

alwaysLetInADT :: Example .
alwaysLetInADT = let x = 5 in (C {x}) .

letOutADT :: Example -> Integer .
letOutADT x = let (C {y}) = x in y.

alwaysLetOutADT :: Integer .
alwaysLetOutADT = let (C {x}) = (C {5}) in x .

main = letOutADT (C {15}) .
