-- Helper function
and :: Boolean -> Boolean -> Boolean .
and True True = True .
and x    y    = False .


-- Variations on addition
additionCongruent :: Integer -> Integer -> Integer -> Integer -> Boolean .
additionCongruent x y xx yy =*=
  if (x == xx)
     then if (y == yy)
             then (x + y) == (xx + yy)
             else True
     else True .

plus :: Integer -> Integer -> Integer .
plus x y = x + y .

plusCongruent :: Integer -> Integer -> Integer -> Integer -> Boolean .
plusCongruent x y xx yy =*=
  if (and (x == xx) (y == yy))
     then (plus x y) == (plus xx yy)
     else True .


-- Variations on incrementing
plusOneCongruent :: Integer -> Integer -> Boolean .
plusOneCongruent x y =*=
  if (x == y)
     then (x + 1) == (y + 1)
     else True .

inc :: Integer -> Integer .
inc x = x + 1 .

incCongruent :: Integer -> Integer -> Boolean .
incCongruent x y =*=
  if (x == y)
     then (inc x) == (inc y)
     else True .


-- Less than & greater than
ltCongruent :: Integer -> Integer -> Integer -> Integer -> Boolean .
ltCongruent x y xx yy =*=
  case and (x == xx) (y == yy) of
    ; True -> (x < y) == (xx < yy)
    ; False -> True .


gtCongruent :: Integer -> Integer -> Integer -> Integer -> Boolean .
gtCongruent x y xx yy =*=
  case and (x == xx) (y == yy) of
    ; True -> (x > y) == (xx > yy)
    ; False -> True .


-- Simple ADTs
adt Example = C Integer .

exampleCongruent :: Example -> Example -> Boolean .
exampleCongruent x y =*=
  case (x == y) of
    ; True -> let (C {xx}) = x in
                let (C {yy}) = y in
                  (xx == yy)
    ; False -> True .

main = exampleCongruent (C {5}) (C {5}) .
