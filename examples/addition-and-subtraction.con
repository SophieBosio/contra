adt Nat = Z | S Nat .

equal :: Nat -> Nat -> Boolean .
equal    Z     Z  = True .
equal    Z     _  = False .
equal    _     Z  = False .
equal (S m) (S n) = equal m n .

notEqual :: Nat -> Nat -> Boolean .
notEqual m n = not (equal m n) .

add :: Nat -> Nat -> Nat .
add    m  Z = m .
add    Z  n = n .
add (S m) n = add m (S n) .

sub :: Nat -> Nat -> Nat .
sub    m     Z  = m .
sub    Z     _  = error "The natural numbers may only be positive" .
sub (S m) (S n) = sub m n .

addCommutative :: Nat -> Nat -> Bool .
addCommutative m n =*= equal (add m n) (add n m) .

subNotCommutative :: Nat -> Nat -> Bool .
subNotCommutative m n =*=
  if notEqual m n
    then (sub m n) (sub n m)
    else True .

subCommutative :: Nat -> Nat -> Bool .
subCommutative m n =*= equal (sub m n) (sub n m) .
